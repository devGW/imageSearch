{"version":3,"sources":["components/navbar/tu.png","components/navbar/Navbar.js","components/image/ImageResult.js","components/search/Search.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","react_default","a","createElement","index_es","title","style","height","borderRadius","src","tu","alt","ImageResult","state","open","currentImg","handleOpen","img","_this","setState","handleClose","imageList","_this2","this","images","props","cols","map","tags","key","id","subtitle","user","actionIcon","onClick","largeImageURL","zoom_in_default","color","actions","label","primary","modal","onRequestClose","width","Component","PropTypes","array","isRequired","Search","search","amount","apiUrl","apiKey","handleChange","e","val","target","value","Object","defineProperty","name","axios","get","concat","then","res","data","hits","catch","err","console","log","handleAmount","index","onChange","floatingLabelText","fullWidth","primaryText","length","image_ImageResult","App","styles","navbar_Navbar","search_Search","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mRCgBzBC,EAbA,WAKX,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,MAAM,gBACVJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAAA,OAAKG,MAPH,CACVC,OAAO,MACPC,aAAc,QAKaC,IAAKC,IAAIC,IAAI,qECN1CC,6MACFC,MAAQ,CACJC,MAAO,EACPC,WAAY,MAEhBC,WAAa,SAAAC,GACTC,EAAKC,SAAS,CACVL,MAAK,EACLC,WAAWE,OAGnBG,YAAc,WACVF,EAAKC,SAAS,CACVL,MAAK,6EAGJ,IACDO,EADCC,EAAAC,KAEGC,EAAWD,KAAKE,MAAhBD,OAEJH,EADAG,EAEIvB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUsB,KAAM,GACXF,EAAOG,IAAI,SAAAV,GAAG,OACXhB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACIC,MAAOY,EAAIW,KACXC,IAAKZ,EAAIa,GACTC,SACI9B,EAAAC,EAAAC,cAAA,kBACOF,EAAAC,EAAAC,cAAA,cAASc,EAAIe,OAGxBC,WACIhC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAY8B,QAAS,kBAAMZ,EAAKN,WAAWC,EAAIkB,iBAC3ClC,EAAAC,EAAAC,cAACiC,EAAAlC,EAAD,CAAQmC,MAAM,YAItBpC,EAAAC,EAAAC,cAAA,OAAKM,IAAKQ,EAAIkB,cAAexB,IAAI,SAMrC,KAEhB,IAAM2B,EAAU,CACZrC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYmC,MAAM,QAAQC,SAAS,EAAMN,QAASX,KAAKH,eAE3D,OACInB,EAAAC,EAAAC,cAAA,WACKkB,EACDpB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACIkC,QAASA,EACTG,OAAO,EACP3B,KAAMS,KAAKV,MAAMC,KACjB4B,eAAgBnB,KAAKH,aACrBnB,EAAAC,EAAAC,cAAA,OAAKM,IAAKc,KAAKV,MAAME,WAAYJ,IAAI,GAAGL,MAAO,CAACqC,MAAQ,mBAxDlDC,aA+D1BhC,EAAYiC,UAAY,CACpBrB,OAAQqB,IAAUC,MAAMC,YAGbnC,QCHAoC,6MA7DXnC,MAAQ,CACJoC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,0BACRC,OAAQ,qCACR5B,OAAQ,MAGV6B,aAAe,SAAAC,GACb,IAAMC,EAAMD,EAAEE,OAAOC,MACrBvC,EAAKC,SAALuC,OAAAC,EAAA,EAAAD,CAAA,GAAiBJ,EAAEE,OAAOI,KAAOL,GAAO,WAC1B,KAARA,EACFrC,EAAKC,SAAS,CAAEK,OAAQ,KAExBqC,IACGC,IADH,GAAAC,OAEO7C,EAAKL,MAAMsC,OAFlB,UAAAY,OAEiC7C,EAAKL,MAAMuC,OAF5C,OAAAW,OAGM7C,EAAKL,MAAMoC,OAHjB,+BAAAc,OAIkC7C,EAAKL,MAAMqC,OAJ7C,qBAMGc,KAAK,SAAAC,GAAG,OAAI/C,EAAKC,SAAS,CAAEK,OAAQyC,EAAIC,KAAKC,SAC7CC,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,UAKlCG,aAAe,SAAClB,EAAGmB,EAAOhB,GAAX,OAAqBvC,EAAKC,SAAS,CAAE+B,OAAQO,6EAI1D,OADAa,QAAQC,IAAIhD,KAAKV,OAEfZ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEwD,KAAK,SACLH,MAAOlC,KAAKV,MAAMoC,OAClByB,SAAUnD,KAAK8B,aACfsB,kBAAkB,kCAClBC,WAAW,IAEb3E,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEwD,KAAK,SACLe,kBAAkB,eAClBlB,MAAOlC,KAAKV,MAAMqC,OAClBwB,SAAUnD,KAAKiD,cAEfvE,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUqD,MAAO,EAAGoB,YAAY,MAChC5E,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUqD,MAAO,GAAIoB,YAAY,OACjC5E,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUqD,MAAO,GAAIoB,YAAY,OACjC5E,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUqD,MAAO,GAAIoB,YAAY,OACjC5E,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUqD,MAAO,GAAIoB,YAAY,QAEnC5E,EAAAC,EAAAC,cAAA,WACCoB,KAAKV,MAAMW,OAAOsD,OAAS,EAC1B7E,EAAAC,EAAAC,cAAC4E,EAAD,CAAavD,OAAQD,KAAKV,MAAMW,SAC9B,aAxDKoB,sBCYNoC,mLAXX,OACE/E,EAAAC,EAAAC,cAAC8E,EAAA,iBAAD,KACEhF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC+E,EAAD,MACAjF,EAAAC,EAAAC,cAACgF,EAAD,eANQvC,aCMEwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzF,EAAAC,EAAAC,cAACwF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC","file":"static/js/main.8b3d4933.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tu.fe893013.png\";","import React from 'react';\r\nimport { AppBar, Menu, MenuItem } from 'material-ui';\r\nimport tu from './tu.png'\r\nconst Navbar = () => {\r\n    const style = {\r\n        height:\"30%\",\r\n        borderRadius: \"50px\"\r\n    }\r\n    return (\r\n        <AppBar title=\"Image Search\">\r\n            <Menu>\r\n                <img style={style} src={tu} alt=\"\"/>\r\n            </Menu>\r\n        </AppBar>\r\n    )\r\n}\r\nexport default Navbar;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport { GridList, GridTile, IconButton, Dialog, FlatButton, } from 'material-ui';\r\nimport ZoomIn from 'material-ui/svg-icons/action/zoom-in';\r\n\r\nclass ImageResult extends Component {\r\n    state = {\r\n        open : false,\r\n        currentImg: \"\"\r\n    }\r\n    handleOpen = img => {\r\n        this.setState({\r\n            open:true,\r\n            currentImg:img\r\n        })\r\n    }\r\n    handleClose = () => {\r\n        this.setState({\r\n            open:false\r\n        })\r\n    }\r\n    render() {\r\n        let imageList;\r\n        const { images } = this.props\r\n        if (images) {\r\n            imageList = (\r\n                <GridList cols={3}>\r\n                    {images.map(img => (\r\n                        <GridTile\r\n                            title={img.tags}\r\n                            key={img.id}\r\n                            subtitle={\r\n                                <span>\r\n                                    by <strong>{img.user}</strong>\r\n                                </span>\r\n                            }\r\n                            actionIcon={\r\n                                <IconButton onClick={() => this.handleOpen(img.largeImageURL)}>\r\n                                    <ZoomIn color=\"white\" />\r\n                                </IconButton>\r\n                            }\r\n                        >\r\n                            <img src={img.largeImageURL} alt=\"\" />\r\n                        </GridTile>\r\n                    ))}\r\n                </GridList>\r\n            )\r\n        } else {\r\n            imageList = null\r\n        }\r\n        const actions = [\r\n            <FlatButton label=\"Close\" primary={true} onClick={this.handleClose}/>\r\n        ]\r\n        return (\r\n            <div>\r\n                {imageList}\r\n                <Dialog\r\n                    actions={actions}\r\n                    modal={false}\r\n                    open={this.state.open}\r\n                    onRequestClose={this.handleClose}>\r\n                    <img src={this.state.currentImg} alt=\"\" style={{width : \"100%\"}}/>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nImageResult.PropTypes = {\r\n    images: PropTypes.array.isRequired\r\n}\r\n\r\nexport default ImageResult;","import React, { Component } from 'react';\r\nimport { TextField, SelectField, MenuItem } from 'material-ui';\r\nimport axios from 'axios';\r\nimport ImageResult from '../image/ImageResult';\r\n\r\n\r\n\r\nclass Search extends Component {\r\n    state = {\r\n        search: \"\",\r\n        amount: 15,\r\n        apiUrl: \"https://pixabay.com/api\",\r\n        apiKey: \"10726265-4c30be9345939ece9f7e25ad1\",\r\n        images: []\r\n      };\r\n    \r\n      handleChange = e => {\r\n        const val = e.target.value;\r\n        this.setState({ [e.target.name]: val }, () => {\r\n          if (val === \"\") {\r\n            this.setState({ images: [] });\r\n          } else {\r\n            axios\r\n              .get(\r\n                `${this.state.apiUrl}/?key=${this.state.apiKey}&q=${\r\n                  this.state.search\r\n                }&image_type=photo&per_page=${this.state.amount}&safesearch=true`\r\n              )\r\n              .then(res => this.setState({ images: res.data.hits }))\r\n              .catch(err => console.log(err));\r\n          }\r\n        });\r\n      };\r\n    \r\n      handleAmount = (e, index, value) => this.setState({ amount: value });\r\n    \r\n      render() {\r\n        console.log(this.state);\r\n        return (\r\n          <div>\r\n            <TextField\r\n              name=\"search\"\r\n              value={this.state.search}\r\n              onChange={this.handleChange}\r\n              floatingLabelText=\"이미지 검색\"\r\n              fullWidth={true}\r\n            />\r\n            <br />\r\n            <SelectField\r\n              name=\"amount\"\r\n              floatingLabelText=\"개수\"\r\n              value={this.state.amount}\r\n              onChange={this.handleAmount}\r\n            >\r\n              <MenuItem value={5} primaryText=\"5\" />\r\n              <MenuItem value={10} primaryText=\"10\" />\r\n              <MenuItem value={15} primaryText=\"15\" />\r\n              <MenuItem value={30} primaryText=\"30\" />\r\n              <MenuItem value={50} primaryText=\"50\" />\r\n            </SelectField>\r\n            <br />\r\n            {this.state.images.length > 0 ? (\r\n              <ImageResult images={this.state.images} />\r\n            ) : null}\r\n          </div>\r\n        );\r\n      }\r\n}\r\n\r\nexport default Search;","import React, { Component } from 'react';\nimport './App.css';\nimport Navbar from './components/navbar/Navbar';\nimport Search from './components/search/Search';\nimport { MuiThemeProvider } from 'material-ui/styles';\n\nclass App extends Component {\n  render() {\n    return (\n      <MuiThemeProvider>\n        <div>\n          <Navbar/>\n          <Search/>\n        </div>\n      </MuiThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}